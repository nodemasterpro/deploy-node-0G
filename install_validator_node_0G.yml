---
- name: Install 0G Validator Node
  hosts: localhost
  become: true

  vars_prompt:
    - name: moniker
      prompt: "Enter your node name"
      private: false

  vars:
    CHAIN_ID: "zgtendermint_16600-1"
    KEYRING_BACKEND: "os"
    RPC_PORT: "26657"
    SEEDS: "c4d619f6088cb0b24b4ab43a0510bf9251ab5d7f@54.241.167.190:26656,44d11d4ba92a01b520923f51632d2450984d5886@54.176.175.48:26656,f2693dd86766b5bf8fd6ab87e2e970d564d20aff@54.193.250.204:26656,f878d40c538c8c23653a5b70f615f8dccec6fb9f@18.166.164.232:26656"
    PERSISTENT_PEERS: "4e3e8e77c611fa847e884cde586d4f4e6831feca@95.111.235.24:12656,f4658b01d888072b35f6eb32a7ec8cb43b44ef4f@109.199.115.111:12656,32005f0fd9921e294c0f926a87f75da449425a38@31.220.80.90:12656,98f648e34eb32e5d4c94365b05c3ab5bcd608ef8@158.220.117.198:27656"
    SNAPSHOT_URL: "https://snapshots-testnet.nodejumper.io/0g-testnet/0g-testnet_latest.tar.lz4"
    HOME_DIR: "{{ ansible_env.HOME }}/.0gchain"


  tasks:
    - name: Install required packages
      ansible.builtin.apt:
        update_cache: yes
        name:
          - curl
          - snapd
          - git
          - jq
          - build-essential
          - gcc
          - unzip
          - wget
          - lz4

    - name: Install Go
      ansible.builtin.shell: |
        wget https://go.dev/dl/go1.22.0.linux-amd64.tar.gz
        sudo rm -rf /usr/local/go && sudo tar -C /usr/local -xzf go1.22.0.linux-amd64.tar.gz
        echo 'export PATH=$PATH:/usr/local/go/bin' >> ~/.bash_profile
      args:
        executable: /bin/bash

    - name: Set timezone to UTC
      ansible.builtin.command:
        cmd: timedatectl set-timezone UTC

    - name: Clone 0G chain repository
      ansible.builtin.git:
        repo: 'https://github.com/0glabs/0g-chain.git'
        dest: "{{ ansible_env.HOME }}/0g-chain"
        version: "v0.1.0"

    - name: Run install script
      ansible.builtin.shell: |
        cd {{ ansible_env.HOME }}/0g-chain/networks/testnet
        ./install.sh
      args:
        executable: /bin/bash

    - name: Source profile
      ansible.builtin.shell: |
        source $HOME/.profile
      args:
        executable: /bin/bash

    - name: Set Chain ID
      ansible.builtin.shell: |
        0gchaind config chain-id {{ CHAIN_ID }}
      args:
        executable: /bin/bash

    - name: Initialize the node
      ansible.builtin.shell: |
        0gchaind init {{ moniker }} --chain-id {{ CHAIN_ID }}
      args:
        executable: /bin/bash

    - name: Set keyring-backend
      ansible.builtin.shell: |
        0gchaind config keyring-backend {{ KEYRING_BACKEND }}
      args:
        executable: /bin/bash   

    - name: Download genesis.json
      ansible.builtin.shell: |
        sudo apt install -y unzip wget
        rm ~/.0gchain/config/genesis.json
        wget -P ~/.0gchain/config https://github.com/0glabs/0g-chain/releases/download/v0.1.0/genesis.json
      args:
        executable: /bin/bash

    - name: Validate genesis file
      ansible.builtin.shell: |
        0gchaind validate-genesis
      args:
        executable: /bin/bash

    - name: Add seeds to config.toml
      ansible.builtin.shell: |
        sed -i.bak -e "s/^seeds *=.*/seeds = \"{{ SEEDS }}\"/" {{ ansible_env.HOME }}/.0gchain/config/config.toml
      args:
        executable: /bin/bash

    - name: Add persistent peers to config.toml
      ansible.builtin.shell: |
        sed -i.bak -e "s/^persistent_peers *=.*/persistent_peers = \"{{ PERSISTENT_PEERS }}\"/" {{ ansible_env.HOME }}/.0gchain/config/config.toml
      args:
        executable: /bin/bash

    - name: Change ports (Optional)
      ansible.builtin.shell: |
        EXTERNAL_IP=$(wget -qO- eth0.me)
        PROXY_APP_PORT=26658
        P2P_PORT=26656
        PPROF_PORT=6060
        API_PORT=1317
        GRPC_PORT=9090
        GRPC_WEB_PORT=9091
        RPC_PORT=26657
        sed -i \
            -e "s/\(proxy_app = \"tcp:\/\/\)\([^:]*\):\([0-9]*\).*/\1\2:$PROXY_APP_PORT\"/" \
            -e "s/^laddr = \".*/laddr = \"tcp:\/\/0.0.0.0:$RPC_PORT\"/" \
            -e "s/\(pprof_laddr = \"\)\([^:]*\):\([0-9]*\).*/\1localhost:$PPROF_PORT\"/" \
            -e "/\[p2p\]/,/^\[/{s/\(laddr = \"tcp:\/\/\)\([^:]*\):\([0-9]*\).*/\10.0.0.0:$P2P_PORT\"/}" \
            -e "/\[p2p\]/,/^\[/{s/\(external_address = \"\)\([^:]*\):\([0-9]*\).*/\1${EXTERNAL_IP}:$P2P_PORT\"/; t; s/\(external_address = \"\).*/\1${EXTERNAL_IP}:$P2P_PORT\"/}" \
            $HOME/.0gchain/config/config.toml
        sed -i \
            -e "/\[api\]/,/^\[/{s/\(address = \"tcp:\/\/\)\([^:]*\):\([0-9]*\)\(\".*\)/\1\2:$API_PORT\4/}" \
            -e "/\[grpc\]/,/^\[/{s/\(address = \"\)\([^:]*\):\([0-9]*\)\(\".*\)/\1\2:$GRPC_PORT\4/}" \
            -e "/\[grpc-web\]/,/^\[/{s/\(address = \"\)\([^:]*\):\([0-9]*\)\(\".*\)/\1\2:$GRPC_WEB_PORT\4/}" \
            $HOME/.0gchain/config/app.toml
      args:
        executable: /bin/bash

    - name: Configure EVM RPC and WebSocket addresses
      ansible.builtin.shell: |
        sed -i 's/^address = "127.0.0.1:8545"/address = "0.0.0.0:8545"/' {{ ansible_env.HOME }}/.0gchain/config/app.toml
        sed -i 's/^ws-address = "127.0.0.1:8546"/ws-address = "0.0.0.0:8546"/' {{ ansible_env.HOME }}/.0gchain/config/app.toml
      args:
        executable: /bin/bash

    - name: Configure pruning to save storage (Optional)
      ansible.builtin.shell: |
        sed -i \
            -e "s/^pruning *=.*/pruning = \"custom\"/" \
            -e "s/^pruning-keep-recent *=.*/pruning-keep-recent = \"100\"/" \
            -e "s/^pruning-interval *=.*/pruning-interval = \"10\"/" \
            "$HOME/.0gchain/config/app.toml"
      args:
        executable: /bin/bash

    - name: Set min gas price
      ansible.builtin.shell: |
        sed -i "s/^minimum-gas-prices *=.*/minimum-gas-prices = \"0ua0gi\"/" $HOME/.0gchain/config/app.toml
      args:
        executable: /bin/bash

    - name: Enable indexer (Optional)
      ansible.builtin.shell: |
        sed -i "s/^indexer *=.*/indexer = \"kv\"/" $HOME/.0gchain/config/config.toml
      args:
        executable: /bin/bash

    - name: Ensure fs.inotify.max_user_instances is set to 256
      ansible.builtin.sysctl:
        name: fs.inotify.max_user_instances
        value: 256
        state: present
        reload: yes    

    - name: Increase the limit of open files
      ansible.builtin.lineinfile:
        path: /etc/security/limits.conf
        line: "* soft nofile 65535\n* hard nofile 65535"
        create: yes

    - name: Set DefaultLimitNOFILE in systemd configuration
      ansible.builtin.lineinfile:
        path: /etc/systemd/system.conf
        line: "DefaultLimitNOFILE=65535"
        create: yes

    - name: Set DefaultLimitNOFILE in user systemd configuration
      ansible.builtin.lineinfile:
        path: /etc/systemd/user.conf
        line: "DefaultLimitNOFILE=65535"
        create: yes

    - name: Reload systemd daemon
      ansible.builtin.shell: |
        systemctl daemon-reload
        systemctl restart systemd-logind
      args:
        executable: /bin/bash

    - name: Create systemd service file for 0G Validator Node
      ansible.builtin.template:
        src: templates/0gd-node.service.j2
        dest: /etc/systemd/system/0gd-node.service

    - name: Enable and start 0G Validator Node service
      ansible.builtin.systemd:
        name: 0gd-node
        enabled: true
        state: started

    - name: Download latest snapshot
      ansible.builtin.get_url:
        url: "{{ SNAPSHOT_URL }}"
        dest: "{{ ansible_env.HOME }}/latest_snapshot.tar.lz4"

    - name: Stop 0G Validator Node service
      ansible.builtin.systemd:
        name: 0gd-node
        state: stopped    

    - name: Backup priv_validator_state.json
      ansible.builtin.shell: |
        cp {{ HOME_DIR }}/data/priv_validator_state.json {{ HOME_DIR }}/priv_validator_state.json.backup
      args:
        executable: /bin/bash

    - name: Reset tendermint state
      ansible.builtin.shell: |
        0gchaind tendermint unsafe-reset-all --home {{ HOME_DIR }} --keep-addr-book
      args:
        executable: /bin/bash

    - name: Extract snapshot
      ansible.builtin.shell: |
        lz4 -d -c {{ ansible_env.HOME }}/latest_snapshot.tar.lz4 | tar -xf - -C {{ HOME_DIR }}
      args:
        executable: /bin/bash

    - name: Restore priv_validator_state.json
      ansible.builtin.shell: |
        mv {{ HOME_DIR }}/priv_validator_state.json.backup {{ HOME_DIR }}/data/priv_validator_state.json
      args:
        executable: /bin/bash

    - name: start 0G Validator Node service
      ansible.builtin.systemd:
        name: 0gd-node
        state: started



